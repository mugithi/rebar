# Kickstart file automatically generated by anaconda.

install
url --url <%= @os_install_site %>
# Add support for our local proxy.
repo --name="CentOS"  --baseurl=<%=@os_install_site %> --proxy="<%=@proxy%>" --cost=100
key --skip
lang en_US.UTF-8
keyboard us
# rebar
rootpw --iscrypted <%= node[:rebar][:provisioner][:server][:default_password_hash] %>
firewall --disabled
authconfig --enableshadow --enablemd5
selinux --disabled
timezone --utc UTC
bootloader --location=mbr --driveorder=<%= @rootdev %> --append="rhgb quiet"
zerombr
ignoredisk --only-use=<%= @rootdev %>
clearpart --all --drives=<%= @rootdev %>
part /boot --fstype ext4 --size=512 --ondisk=<%= @rootdev %>
part /boot/efi --fstype vfat --size=512 --ondisk=<%= @rootdev %>
part swap --recommended
part pv.6 --size=1 --grow --ondisk=<%= @rootdev %>
volgroup <%=@name.split('.')[0]%> --pesize=32768 pv.6
logvol / --fstype ext4 --name=lv_root --vgname=<%=@name.split('.')[0]%> --size=1 --grow
text
reboot

%packages
@base
@core
vim-enhanced
keyutils
trousers
fipscheck
device-mapper-multipath
OpenIPMI
OpenIPMI-tools
emacs-nox
openssh
curl.x86_64
ntp
ntpdate
tcpdump
efibootmgr
%post

exec > /root/post-install.log 2>&1
set -x
export PS4='${BASH_SOURCE}@${LINENO}(${FUNCNAME[0]}): '
(cd /bin; curl -fgl -O "<%=@provisioner_web%>/files/rebar"; chmod 755 rebar)
export REBAR_ENDPOINT="<%=@api_server%>"

key_re='rebar\.install\.key=([^ ]+)'

if [[ $(cat /proc/cmdline) =~ $key_re ]]; then
    export REBAR_KEY="${BASH_REMATCH[1]}"
    echo "$REBAR_KEY" >/etc/rebar.install.key
elif [[ -f /etc/rebar.install.key ]]; then
    export REBAR_KEY="$(cat /etc/rebar.install.key)"
fi

hostname_re='rebar\.fqdn=([^ ]+)'
if [[ $(cat /proc/cmdline) =~ $hostname_re ]]; then
   HOSTNAME=${BASH_REMATCH[1]}
   if [ -f /etc/sysconfig/network ] ; then
      sed -i -e "s/HOSTNAME=.*/HOSTNAME=${HOSTNAME}/" /etc/sysconfig/network
    fi
    echo "${HOSTNAME#*.}" >/etc/domainname
else
    echo "Cannot set hostname, we fail."
    sleep 999
    reboot -f
fi
echo "$HOSTNAME" >/etc/hostname
hostname "$HOSTNAME"

# epel must be enabled to install jq.
cat >/etc/yum.repos.d/rebar-epel.repo <<EOF
[rebar-epel]
name=Rebar Epel Repo
baseurl=http://mirrors.kernel.org/fedora-epel/6/x86_64/
gpgcheck=0
EOF

echo "proxy=<%=@proxy%>" >> /etc/yum.conf
sed -i '/^enabled/ s/1/0/' /etc/yum/pluginconf.d/fastestmirror.conf

# Make sure we can install gems
cat >/etc/gemrc <<EOF
:sources:
- http://rubygems.org/
gem: --no-ri --no-rdoc --bindir /usr/local/bin --http-proxy <%=@proxy%>
EOF

cp /etc/gemrc /root/.gemrc

rsyslog_dir="/etc/rsyslog.d"
mkdir -p "$rsyslog_dir"
echo '$IncludeConfig /etc/rsyslog.d/*.conf' >>/etc/rsyslog.conf
if [ ! -f "$rsyslog_dir/10-rebar-client.conf" ]; then
    echo "*.* @@$<%= @logging_server %>" > "$rsyslog_dir/10-rebar-client.conf"
    if ! curl -f -s -o "$rsyslog_dir/00-rebar-debug.conf" \
        <%= @provisioner_web %>/rsyslog.d/00-rebar-debug.conf
    then
        rm -f "$rsyslog_dir/00-rebar-debug.conf"
    fi
fi

yum -y install jq

mkdir -p /root/.ssh
cat >/root/.ssh/authorized_keys <<EOF
<%= @keys %>
EOF

# Setup a proxy for the environment
echo "http_proxy=<%=@proxy%>" >> /etc/environment
echo "https_proxy=<%=@proxy%>" >> /etc/environment
echo "no_proxy=127.0.0.1,localhost,::1,<%@proxy_addr%>" >> /etc/environment

# Setup bash proxy env
mkdir -p /etc/profile.d
echo "export http_proxy=<%=@proxy%>" >> /etc/profile.d/proxy.sh
echo "export https_proxy=<%=@proxy%>" >> /etc/profile.d/proxy.sh
echo "export no_proxy=127.0.0.1,localhost,::1" >> /etc/profile.d/proxy.sh

echo "PermitRootLogin without-password" >> /etc/ssh/sshd_config

# Allow client to pass http proxy environment variables
echo "AcceptEnv http_proxy https_proxy no_proxy" >> /etc/ssh/sshd_config


curl -s -o /etc/init.d/rebar_join.sh "<%=@web_path%>/rebar_join.sh"
chmod +x /etc/init.d/rebar_join.sh
ln -s /etc/init.d/rebar_join.sh /etc/rc3.d/S80rebar
ln -s /etc/init.d/rebar_join.sh /etc/rc5.d/S80rebar
ln -s /etc/init.d/rebar_join.sh /etc/rc2.d/S80rebar
rm /etc/yum.repos.d/rebar-epel.repo

# boot to runlevel 3 by default
sed -i -e '/initdefault/ s/5/3/' /etc/inittab
rebar nodes update "$HOSTNAME" '{"bootenv": "local"}'
while [[ $(rebar nodes get "$HOSTNAME" attrib provisioner-active-bootstate |jq -r '.value') != local ]]; do
    sleep 1
done

sync
