- value = Attrib.get(attrib.name, obj)
= form_for :attrib, :remote => true, :url => attribs_api_path(:id=>attrib.id, obj_type=>obj.id, :api_version=>'v2'), :html => { :method=>:put, :'data-type' => 'html',  :class => "formtastic" } do |f|
  %tr.node{ :class => cycle(:odd, :even) }
    %td
      = link_to attrib.name_i18n, attrib_path(attrib.id), :title=>attrib.description
      - if flag == :error
        = image_tag('icons/error.png', :title=>error)
      - if flag == :raw
        = image_tag('icons/raw.png', :title=>"raw mode")
    - if editable and attrib.writable
      %td
        - case attrib.schema['type'] #handle schema types so integers are actually valid
        - when 'int'
          =number_field_tag :value, value, :size => 40
        - else
          =text_field_tag :value, value, :size => 40
      %td{:align=>"right"}
        %input.button{:type => "submit", :name => "save", :value => t('save')}
    -else
      - if value.is_a? Hash or value.is_a? Array
        %td
          %span.toggle.with_label{:href => "#", :id => "#toggle_#{attrib.id}", :rel => "rawdata_#{attrib.id}" }
            = truncate value.to_s, :length=>120
          %pre{:id=>"rawdata_#{attrib.id}", :style =>"display:none"}
            = JSON.pretty_generate(value)
      - elsif !value.nil?
        %td= value
      - else
        %td= t('not_set')
      %td= ''
    - if current_user and current_user.settings(:ui).debug
      %td= attrib.ui_renderer rescue Attrib::UI_RENDERER
