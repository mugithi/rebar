%h1= t '.title'

%table.data.box
  %thead
    %tr
      %th= t '.node'
      - @networks.each do |net|
        %th
          %span= link_to net.name, network_path(net.id), :title=>net.description
          %span{:title=>"#{t '.vlan'}: #{(net.use_vlan ? net.vlan : t('not_set'))}"}
            = net.conduit
  %tbody
    - @nodes.each do |node|
      - allocations = NetworkAllocation.node(node)
      %tr.node{ :class => cycle(:odd, :even) }
        %td
          -if node.admin
            %strong
              = link_to node.name, main_app.node_path(node.id), :title=>node.description
          -else
            = link_to node.name, main_app.node_path(node.id), :title=>node.description
        - @networks.each do |net|
          - nr = NodeRole.peers_by_node_and_role(node, net.role).first rescue nil
          %td
            - if nr
              - ip = allocations.detect { |a| a.network.id == net.id and !a.range.name.ends_with? "-v6"}
              %span
                %span.led{:class => NodeRole::STATES[nr.state], :title=>nr.state_name}
                  - addr = ip.address rescue t('not_set')
                  = link_to "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;".html_safe+addr, main_app.node_role_path(nr.id)
