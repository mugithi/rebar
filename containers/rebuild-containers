#!/usr/bin/env bash

[[ $DEBUG ]] && set -x

#
# NOTE: When building on MAC, you must set SWS_LISTEN_ADDR to your docker
# bridge IP (e.g. 192.168.99.1) and accept the mac firewall port allowance.
#


export PS4='${BASH_SOURCE}@${LINENO}(${FUNCNAME[0]}): '
declare -A CONTAINERS
CONTAINERS['digitalrebar/base']='base'
CONTAINERS['digitalrebar/deploy-service-wrapper']='service-wrapper'
CONTAINERS['digitalrebar/dr_dns']='dns'
CONTAINERS['digitalrebar/dr_forwarder']='forwarder'
CONTAINERS['digitalrebar/dr_goiardi']='goiardi'
CONTAINERS['digitalrebar/dr_ntp']='ntp'
CONTAINERS['digitalrebar/dr_postgres']='postgres'
CONTAINERS['digitalrebar/dr_provisioner']='provisioner'
CONTAINERS['digitalrebar/dr_rebar_api']='rebar-api'
CONTAINERS['digitalrebar/dr_rebar_dhcp']='rebar-dhcp'
CONTAINERS['digitalrebar/dr_webproxy']='webproxy'
CONTAINERS['digitalrebar/cloudwrap']='cloudwrap'
CONTAINERS['digitalrebar/dr_node']='node'
CONTAINERS['digitalrebar/logging']='logging'
CONTAINERS['digitalrebar/dr_rev_proxy']='rebar-rev-proxy'
CONTAINERS['digitalrebar/dr_trust_me']='trust-me'
#CONTAINERS['digitalrebar/slave']='slave'
CONTAINERS['digitalrebar/rule-engine']='rule-engine'

declare -A REPOS
declare -A CONTAINER_PARENTS
declare -A CONTAINER_RANK
declare -A CONTAINER_CHILDREN
declare -A CONTAINERS_TO_BUILD
declare -A BUILT_CONTAINERS
declare -A UNBUILT_CONTAINERS
declare -A UNKNOWN_CONTAINERS
declare -A PARENT_CONTAINER_REBUILT
declare -A CONTAINERS_TO_SKIP
declare -A PULLED_CONTAINERS
declare -A FORCE_BUILD_CONTAINERS

branch="$(git symbolic-ref -q HEAD)"
branch="${branch##refs/heads/}"
branch="${branch:-latest}"

DR_TAG="${DR_TAG:-${branch}}"
PULL_CONTAINERS=false
PUSH_CONTAINERS=false
UPDATE_GIT=false
FORCE_BUILD=false

if [[ $0 = /* ]]; then
    CONTAINER_DIR="$0"
elif [[ $0 = .*  || $0 = */* ]]; then
    CONTAINER_DIR="$(readlink "$PWD/$0")"
    if [[ ! $CONTAINER_DIR ]] ; then
        CONTAINER_DIR="$PWD/$0"
    fi
else
    echo "Cannot figure out where core is!"
    exit 1
fi

CONTAINER_DIR="${CONTAINER_DIR%/rebuild-containers}"
DR_DIR="${CONTAINER_DIR%/containers/*}"

# Figure out all the trans-container dependency information we will need.
setup_parents() {
    local container
    for container in "${!CONTAINERS[@]}"; do
        REPOS[${CONTAINERS[$container]}]=$container
    done
    local dockerfile repo unused parent
    # Figure out who the parent of a container is
    for dockerfile in "$CONTAINER_DIR"/*/Dockerfile.in; do
        repo=${dockerfile#${CONTAINER_DIR}/}
        repo=${repo%/Dockerfile.in}
        local container=${REPOS[$repo]}
        read unused parent < <(grep '^FROM' "$dockerfile" |head -1)
        if [[ ${CONTAINERS[${parent%:*}]} ]]; then
            CONTAINER_PARENTS[$container]=${parent%:*}
        fi
    done
    for container in "${!CONTAINERS[@]}"; do
        # Figure out what our children are.
        local children=()
        for child in "${!CONTAINER_PARENTS[@]}"; do
            [[ ${CONTAINER_PARENTS[$child]} = $container ]] || continue
            children+=("$child")
        done
        CONTAINER_CHILDREN[$container]="${children[*]}"
        # Figure out how many parents we are responsible for
        # for a container
        local rank=0 child=$container
        while [[ ${CONTAINER_PARENTS[$child]} ]]; do
            rank=$((rank + 1))
            child=${CONTAINER_PARENTS[$child]}
        done
        CONTAINER_RANK[$container]=$rank
    done

}

setup_parents

build_children_of() {
    # $1 = container whose children should be built.
    local child
    for child in ${CONTAINER_CHILDREN[$1]}; do
        [[ ${BUILT_CONTAINERS[$child]} ]] && continue
        FORCE_BUILD_CONTAINERS[$child]=true
        CONTAINERS_TO_BUILD[$child]=true
        build_container "$child"
    done
}

# Get the image numeric ID of a container image given the name of the image.
image_id() {
    docker inspect --type=image -f '{{.Config.Image}}' "${1}:${DR_TAG}"
}

branch_exists() { git show-ref --quiet --verify --heads -- "refs/heads/$1"; }

# Test to see if a container does not need to be rebuilt.
container_is_up_to_date() (
    [[ ${CONTAINERS_TO_SKIP[$1]} ]] || [[ ${BUILT_CONTAINERS[$1]} ]] && return 0
    # We are forcing a rebuild, it needs rebuilding.
    [[ ${FORCE_BUILD_CONTAINERS[$1]} == true && ${CONTAINERS_TO_BUILD[$1]} ]] && return 1
    # It does not have a last-built-image-id, it needs building.
    [[ -f $repo_dir/last-built-image-id ]] || return 1
    local pc=${CONTAINER_PARENTS[$1]}
    [[ $pc ]] && (! container_is_up_to_date "$pc") && return 1
    cd "$repo_dir"
    local last_changed_rev=$(git rev-list -1 HEAD -- last-built-image-id)
    # This port of the git repo has changed since the last time we built this container,
    # it needs rebuilding.
    [[ $last_changed_rev ]] || return 1
    # the commit for the last built ID does not exist, it needs rebuilding.
    git diff --exit-code -s "$last_changed_rev" -- . || return 1
    # if the current image ID does not equal the last built one, it needs rebuilding.
    [[ $(image_id "$1") = $(cat last-built-image-id) ]]
)

# Build a container if needed.
build_container() {
    # $1 = container to build
    [[ ${UNBUILT_CONTAINERS[$1]} ]] && return 1
    local repo_dir="$CONTAINER_DIR/${CONTAINERS[$1]}"
    if container_is_up_to_date "$1"; then
        echo "Container $1 does not need rebuilding"
        return 0
    fi
    if [[ ! ${PULLED_CONTAINERS[$1]} && ! ${NEVER_PULL} ]]; then
        docker pull "$1:$DR_TAG" || exit 1
        if container_is_up_to_date "$1"; then
            echo "Container $1 does not need rebuilding"
            return 0
        fi
    fi

    echo
    echo "Building container $1"
    local buildargs=("-t" "${1}:${DR_TAG}")
    if [[ $1 = digitalrebar/dr_rebar_api ]]; then
        [[ -d $repo_dir/core ]] && rm -rf "${repo_dir}/core" || :
        if [[ $USE_LOCAL_SOURCE = true ]]; then
            cp -a "$DR_DIR/core" "$repo_dir"
        else
            mkdir -p "$repo_dir/core"
        fi
    fi
    buildargs+=("--build-arg" "DR_TAG=${DR_TAG}")
    [[ ${FORCE_BUILD_CONTAINERS[$1]} = true ]] && buildargs+=("--no-cache")
    if ! (
            cd "$repo_dir" && \
                sed -e "/ADD / s/localhost/${SWS_LISTEN_ADDR}/" -e "/FROM digitalrebar/ s/\$/:${DR_TAG}/" <Dockerfile.in >Dockerfile && \
                docker build "${buildargs[@]}" .); then
        echo "Build of container $1 failed."
        UNBUILT_CONTAINERS[$1]="Run 'cd \"$repo_dir\" && docker build ${buildargs[*]} .' to see what failed."
        return 1
    fi
    rm "$repo_dir/Dockerfile"
    BUILT_CONTAINERS[$1]=true
    echo "Build of $1 successful"
    echo
    build_children_of "$1"
}

# Sort containers by rank to ensure that we don't perform needless rebuilds.
sort_containers() {
    local container
    for container in "$@"; do
        printf "%s %s\n" "${CONTAINER_RANK[$container]}" "$container"
    done |sort -n |awk '{print $2}'
}

help() {
    cat <<EOF
rebuild-containers rebuilds the container hierarchy that Rebar is
built from.  It understands how the containers relate to each other,
and can figure out (via container build tracking branches and
container image IDs what containers would need to be rebuilt when
any of them change.  It takes the following options:

    --force Force a build even if it appears that the container does
            not need rebuilding.

    --tag if you want to tag the built containers with something
          other than 'latest'.

    --pull if you want to pull containers from the Docker hub before
           being built.  This is used to make sure that we avoid
           excessive container rebuilds.  If this is not set, 
           we will only pull containers if we think they may need
           a rebuild, unless --never-pull is set.

    --never-pull if you don't want to pull containers even
           if they would otherwise be rebuilt.

    --update-git if you want to update the tracking metadata in the
           deploy repository.

    --push to push built containers to Docker hub.  It will also
           push a branch with the latest built image IDs to Github.
           That branch should be merged to the appropriate release
           branch to keep the deploy repository synced up to the
           container images at Dockerhub.
           --push implies --update-git.

    --all to build all the buildable containers.

    --use-local-source to have the Rebar API build using the local DR source
           instead of cloning from Digital Rebar

    --help This help.
EOF
}

while (( $# != 0)); do
    case $1 in
        --tag)
            shift
            DR_TAG=$1;;
        --pull)
            if [[ $NEVER_PULL ]]; then
                echo "Cannot have --pull and --never-pull at the same time"
                exit 1
            fi
            ALWAYS_PULL=true;;
        --never-pull)
            if [[ $ALWAYS_PULL ]]; then
                echo "Cannot have --never-pull and --pull at the same time!"
                exit 1
            fi
            NEVER_PULL=true;;
        --push)
            UPDATE_GIT=true
            PUSH_CONTAINERS=true;;
        --skip)
            CONTAINERS_TO_SKIP["$2"]=true
            shift;;
        --update-git)
            UPDATE_GIT=true;;
        --force)
            FORCE_BUILD=true;;
        --help)
            help && exit 0;;
        --use-local-source)
            USE_LOCAL_SOURCE=true;;
        --all)
            for d in "$CONTAINER_DIR"/*; do
                [[ -f $d/Dockerfile.in ]] || continue
                [[ ${REPOS[${d##*/}]} ]] || continue
                CONTAINERS_TO_BUILD[${REPOS[${d##*/}]}]=true
            done;;
        *)
            if [[ ${CONTAINERS[$1]} ]]; then
                CONTAINERS_TO_BUILD[$1]=true
            elif [[ ${REPOS[${1##*/}]} ]]; then
                CONTAINERS_TO_BUILD[${REPOS[${1##*/}]}]=true
            else
                UNKNOWN_CONTAINERS[$1]=true
            fi;;
    esac
    shift
done

if [[ ${#UNKNOWN_CONTAINERS[@]} != 0 ]]; then
    echo "Cannot build unknown containers:"
    printf "\t%s\n" "${!UNKNOWN_CONTAINERS[@]}"
    exit 1
fi

if [[ ${#CONTAINERS_TO_BUILD[@]} == 0 ]]; then
    help
    exit 0
fi

if [ -z ${GOPATH+x} ]; then
    echo "Please configure \$GOPATH variable"
    exit 1
fi

if ! which sws; then
    go get -u github.com/VictorLowther/sws
fi

if ! which sws; then
    echo "Please verify \$GOPATH/bin is in \$PATH"
    exit 1
fi

SWS_LISTEN_ADDR=${SWS_LISTEN_ADDR:-localhost}
sws -listen ${SWS_LISTEN_ADDR}:28569 -site ../go/bin &
trap 'kill %1' INT TERM EXIT KILL

# install required go binaries
binpath="$CONTAINER_DIR/../go/bin/$DR_TAG/linux/amd64"
mkdir -p "$binpath"
os="linux"
arch="amd64"
GOOS="$os" GOARCH="$arch" go build -o "${binpath}/amttool" "github.com/VictorLowther/intelamt/amttool"
GOOS="$os" GOARCH="$arch" go build -o "${binpath}/wscli" "github.com/VictorLowther/wsman/wscli"

if [[ $ALWAYS_PULL ]]; then
    for container in "${!CONTAINERS[@]}"; do
        docker pull "$container:$DR_TAG" || exit 1
        PULLED_CONTAINERS[$container]=true
    done
fi

if [[ $FORCE_BUILD = true ]]; then
    for container in "${!CONTAINERS_TO_BUILD[@]}"; do
        FORCE_BUILD_CONTAINERS[$container]=true
    done
fi

for container in $(sort_containers "${!CONTAINERS_TO_BUILD[@]}"); do
    [[ ${BUILT_CONTAINERS[$container]} ]] || build_container "$container" || break
done

if [[ ${#UNBUILT_CONTAINERS[@]} != 0 ]]; then
    for container in "${!UNBUILT_CONTAINERS[@]}"; do
        echo "Build of $container failed."
        echo "${UNBUILT_CONTAINERS[$container]}"
        echo
    done
    exit 1
fi

if [[ $UPDATE_GIT = true && ${#BUILT_CONTAINERS[@]} != 0 ]]; then
    for container in $(sort_containers "${!BUILT_CONTAINERS[@]}"); do
        [[ $PUSH_CONTAINERS = true ]] && docker push "${container}:${DR_TAG}"
        id_file="$CONTAINER_DIR/${CONTAINERS[$container]}/last-built-image-id"
        image_id "$container" >"$id_file"
        git add "$id_file"
    done
    git commit -m "Built containers: ${!BUILT_CONTAINERS[*]}"
    [[ $PUSH_CONTAINERS = true ]] && \
        git push origin "HEAD:containers-built-for-$(git rev-parse --short HEAD)"
fi
